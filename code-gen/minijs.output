Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: ε

    5 function: _FUNCDEC _ID $@1 _LPAREN parameters _RPAREN body

    6 $@2: ε

    7 function: _VARDEC _ID _ASSIGN $@2 _LPAREN parameters _RPAREN _ARROW body

    8 parameters: ε
    9           | parameter_list

   10 parameter_list: parameter
   11               | parameter_list _COMMA parameter

   12 parameter: _ID

   13 $@3: ε

   14 body: _LBRACKET variable_list $@3 statement_list _RBRACKET

   15 variable_list: ε
   16              | variable_list variable

   17 variable: _VARDEC _ID _SEMICOLON

   18 statement_list: ε
   19               | statement_list statement

   20 statement: compound_statement
   21          | assignment_statement
   22          | if_statement
   23          | return_statement

   24 compound_statement: _LBRACKET statement_list _RBRACKET

   25 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   26 num_exp: exp
   27        | num_exp _AROP exp

   28 exp: literal
   29    | _ID
   30    | function_call
   31    | _LPAREN num_exp _RPAREN

   32 literal: _NUMBER

   33 $@4: ε

   34 function_call: _ID $@4 _LPAREN arguments _RPAREN

   35 arguments: ε
   36          | argument_list

   37 argument_list: argument
   38              | argument_list _COMMA argument

   39 argument: num_exp

   40 if_statement: if_part
   41             | if_part _ELSE statement

   42 @5: ε

   43 $@6: ε

   44 if_part: _IF _LPAREN @5 rel_exp $@6 _RPAREN statement

   45 rel_exp: num_exp _RELOP num_exp

   46 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _VARDEC (258) 7 17
    _FUNCDEC (259) 5
    _ARROW (260) 7
    _COMMA (261) 11 38
    _IF (262) 44
    _ELSE (263) 41
    _RETURN (264) 46
    _ID <s> (265) 5 7 12 17 25 29 34
    _NUMBER <s> (266) 32
    _LPAREN (267) 5 7 31 34 44
    _RPAREN (268) 5 7 31 34 44
    _LBRACKET (269) 14 24
    _RBRACKET (270) 14 24
    _ASSIGN (271) 7 25
    _SEMICOLON (272) 17 25 46
    _AROP <i> (273) 27
    _RELOP <i> (274) 45
    ONLY_IF (275)


Nonterminals, with rules where they appear

    $accept (21)
        on left: 0
    program (22)
        on left: 1
        on right: 0
    function_list (23)
        on left: 2 3
        on right: 1 3
    function (24)
        on left: 5 7
        on right: 2 3
    $@1 (25)
        on left: 4
        on right: 5
    $@2 (26)
        on left: 6
        on right: 7
    parameters (27)
        on left: 8 9
        on right: 5 7
    parameter_list (28)
        on left: 10 11
        on right: 9 11
    parameter (29)
        on left: 12
        on right: 10 11
    body (30)
        on left: 14
        on right: 5 7
    $@3 (31)
        on left: 13
        on right: 14
    variable_list (32)
        on left: 15 16
        on right: 14 16
    variable (33)
        on left: 17
        on right: 16
    statement_list (34)
        on left: 18 19
        on right: 14 19 24
    statement (35)
        on left: 20 21 22 23
        on right: 19 41 44
    compound_statement (36)
        on left: 24
        on right: 20
    assignment_statement (37)
        on left: 25
        on right: 21
    num_exp <i> (38)
        on left: 26 27
        on right: 25 27 31 39 45 46
    exp <i> (39)
        on left: 28 29 30 31
        on right: 26 27
    literal <i> (40)
        on left: 32
        on right: 28
    function_call <i> (41)
        on left: 34
        on right: 30
    $@4 (42)
        on left: 33
        on right: 34
    arguments <i> (43)
        on left: 35 36
        on right: 34
    argument_list <i> (44)
        on left: 37 38
        on right: 36 38
    argument <i> (45)
        on left: 39
        on right: 37 38
    if_statement (46)
        on left: 40 41
        on right: 22
    if_part <i> (47)
        on left: 44
        on right: 40 41
    @5 (48)
        on left: 42
        on right: 44
    $@6 (49)
        on left: 43
        on right: 44
    rel_exp <i> (50)
        on left: 45
        on right: 44
    return_statement (51)
        on left: 46
        on right: 23


State 0

    0 $accept: • program $end

    _VARDEC   shift, and go to state 1
    _FUNCDEC  shift, and go to state 2

    program        go to state 3
    function_list  go to state 4
    function       go to state 5


State 1

    7 function: _VARDEC • _ID _ASSIGN $@2 _LPAREN parameters _RPAREN _ARROW body

    _ID  shift, and go to state 6


State 2

    5 function: _FUNCDEC • _ID $@1 _LPAREN parameters _RPAREN body

    _ID  shift, and go to state 7


State 3

    0 $accept: program • $end

    $end  shift, and go to state 8


State 4

    1 program: function_list •
    3 function_list: function_list • function

    _VARDEC   shift, and go to state 1
    _FUNCDEC  shift, and go to state 2

    $default  reduce using rule 1 (program)

    function  go to state 9


State 5

    2 function_list: function •

    $default  reduce using rule 2 (function_list)


State 6

    7 function: _VARDEC _ID • _ASSIGN $@2 _LPAREN parameters _RPAREN _ARROW body

    _ASSIGN  shift, and go to state 10


State 7

    5 function: _FUNCDEC _ID • $@1 _LPAREN parameters _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 11


State 8

    0 $accept: program $end •

    $default  accept


State 9

    3 function_list: function_list function •

    $default  reduce using rule 3 (function_list)


State 10

    7 function: _VARDEC _ID _ASSIGN • $@2 _LPAREN parameters _RPAREN _ARROW body

    $default  reduce using rule 6 ($@2)

    $@2  go to state 12


State 11

    5 function: _FUNCDEC _ID $@1 • _LPAREN parameters _RPAREN body

    _LPAREN  shift, and go to state 13


State 12

    7 function: _VARDEC _ID _ASSIGN $@2 • _LPAREN parameters _RPAREN _ARROW body

    _LPAREN  shift, and go to state 14


State 13

    5 function: _FUNCDEC _ID $@1 _LPAREN • parameters _RPAREN body

    _ID  shift, and go to state 15

    $default  reduce using rule 8 (parameters)

    parameters      go to state 16
    parameter_list  go to state 17
    parameter       go to state 18


State 14

    7 function: _VARDEC _ID _ASSIGN $@2 _LPAREN • parameters _RPAREN _ARROW body

    _ID  shift, and go to state 15

    $default  reduce using rule 8 (parameters)

    parameters      go to state 19
    parameter_list  go to state 17
    parameter       go to state 18


State 15

   12 parameter: _ID •

    $default  reduce using rule 12 (parameter)


State 16

    5 function: _FUNCDEC _ID $@1 _LPAREN parameters • _RPAREN body

    _RPAREN  shift, and go to state 20


State 17

    9 parameters: parameter_list •
   11 parameter_list: parameter_list • _COMMA parameter

    _COMMA  shift, and go to state 21

    $default  reduce using rule 9 (parameters)


State 18

   10 parameter_list: parameter •

    $default  reduce using rule 10 (parameter_list)


State 19

    7 function: _VARDEC _ID _ASSIGN $@2 _LPAREN parameters • _RPAREN _ARROW body

    _RPAREN  shift, and go to state 22


State 20

    5 function: _FUNCDEC _ID $@1 _LPAREN parameters _RPAREN • body

    _LBRACKET  shift, and go to state 23

    body  go to state 24


State 21

   11 parameter_list: parameter_list _COMMA • parameter

    _ID  shift, and go to state 15

    parameter  go to state 25


State 22

    7 function: _VARDEC _ID _ASSIGN $@2 _LPAREN parameters _RPAREN • _ARROW body

    _ARROW  shift, and go to state 26


State 23

   14 body: _LBRACKET • variable_list $@3 statement_list _RBRACKET

    $default  reduce using rule 15 (variable_list)

    variable_list  go to state 27


State 24

    5 function: _FUNCDEC _ID $@1 _LPAREN parameters _RPAREN body •

    $default  reduce using rule 5 (function)


State 25

   11 parameter_list: parameter_list _COMMA parameter •

    $default  reduce using rule 11 (parameter_list)


State 26

    7 function: _VARDEC _ID _ASSIGN $@2 _LPAREN parameters _RPAREN _ARROW • body

    _LBRACKET  shift, and go to state 23

    body  go to state 28


State 27

   14 body: _LBRACKET variable_list • $@3 statement_list _RBRACKET
   16 variable_list: variable_list • variable

    _VARDEC  shift, and go to state 29

    $default  reduce using rule 13 ($@3)

    $@3       go to state 30
    variable  go to state 31


State 28

    7 function: _VARDEC _ID _ASSIGN $@2 _LPAREN parameters _RPAREN _ARROW body •

    $default  reduce using rule 7 (function)


State 29

   17 variable: _VARDEC • _ID _SEMICOLON

    _ID  shift, and go to state 32


State 30

   14 body: _LBRACKET variable_list $@3 • statement_list _RBRACKET

    $default  reduce using rule 18 (statement_list)

    statement_list  go to state 33


State 31

   16 variable_list: variable_list variable •

    $default  reduce using rule 16 (variable_list)


State 32

   17 variable: _VARDEC _ID • _SEMICOLON

    _SEMICOLON  shift, and go to state 34


State 33

   14 body: _LBRACKET variable_list $@3 statement_list • _RBRACKET
   19 statement_list: statement_list • statement

    _IF        shift, and go to state 35
    _RETURN    shift, and go to state 36
    _ID        shift, and go to state 37
    _LBRACKET  shift, and go to state 38
    _RBRACKET  shift, and go to state 39

    statement             go to state 40
    compound_statement    go to state 41
    assignment_statement  go to state 42
    if_statement          go to state 43
    if_part               go to state 44
    return_statement      go to state 45


State 34

   17 variable: _VARDEC _ID _SEMICOLON •

    $default  reduce using rule 17 (variable)


State 35

   44 if_part: _IF • _LPAREN @5 rel_exp $@6 _RPAREN statement

    _LPAREN  shift, and go to state 46


State 36

   46 return_statement: _RETURN • num_exp _SEMICOLON

    _ID      shift, and go to state 47
    _NUMBER  shift, and go to state 48
    _LPAREN  shift, and go to state 49

    num_exp        go to state 50
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53


State 37

   25 assignment_statement: _ID • _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 54


State 38

   24 compound_statement: _LBRACKET • statement_list _RBRACKET

    $default  reduce using rule 18 (statement_list)

    statement_list  go to state 55


State 39

   14 body: _LBRACKET variable_list $@3 statement_list _RBRACKET •

    $default  reduce using rule 14 (body)


State 40

   19 statement_list: statement_list statement •

    $default  reduce using rule 19 (statement_list)


State 41

   20 statement: compound_statement •

    $default  reduce using rule 20 (statement)


State 42

   21 statement: assignment_statement •

    $default  reduce using rule 21 (statement)


State 43

   22 statement: if_statement •

    $default  reduce using rule 22 (statement)


State 44

   40 if_statement: if_part •
   41             | if_part • _ELSE statement

    _ELSE  shift, and go to state 56

    $default  reduce using rule 40 (if_statement)


State 45

   23 statement: return_statement •

    $default  reduce using rule 23 (statement)


State 46

   44 if_part: _IF _LPAREN • @5 rel_exp $@6 _RPAREN statement

    $default  reduce using rule 42 (@5)

    @5  go to state 57


State 47

   29 exp: _ID •
   34 function_call: _ID • $@4 _LPAREN arguments _RPAREN

    _LPAREN   reduce using rule 33 ($@4)
    $default  reduce using rule 29 (exp)

    $@4  go to state 58


State 48

   32 literal: _NUMBER •

    $default  reduce using rule 32 (literal)


State 49

   31 exp: _LPAREN • num_exp _RPAREN

    _ID      shift, and go to state 47
    _NUMBER  shift, and go to state 48
    _LPAREN  shift, and go to state 49

    num_exp        go to state 59
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53


State 50

   27 num_exp: num_exp • _AROP exp
   46 return_statement: _RETURN num_exp • _SEMICOLON

    _SEMICOLON  shift, and go to state 60
    _AROP       shift, and go to state 61


State 51

   26 num_exp: exp •

    $default  reduce using rule 26 (num_exp)


State 52

   28 exp: literal •

    $default  reduce using rule 28 (exp)


State 53

   30 exp: function_call •

    $default  reduce using rule 30 (exp)


State 54

   25 assignment_statement: _ID _ASSIGN • num_exp _SEMICOLON

    _ID      shift, and go to state 47
    _NUMBER  shift, and go to state 48
    _LPAREN  shift, and go to state 49

    num_exp        go to state 62
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53


State 55

   19 statement_list: statement_list • statement
   24 compound_statement: _LBRACKET statement_list • _RBRACKET

    _IF        shift, and go to state 35
    _RETURN    shift, and go to state 36
    _ID        shift, and go to state 37
    _LBRACKET  shift, and go to state 38
    _RBRACKET  shift, and go to state 63

    statement             go to state 40
    compound_statement    go to state 41
    assignment_statement  go to state 42
    if_statement          go to state 43
    if_part               go to state 44
    return_statement      go to state 45


State 56

   41 if_statement: if_part _ELSE • statement

    _IF        shift, and go to state 35
    _RETURN    shift, and go to state 36
    _ID        shift, and go to state 37
    _LBRACKET  shift, and go to state 38

    statement             go to state 64
    compound_statement    go to state 41
    assignment_statement  go to state 42
    if_statement          go to state 43
    if_part               go to state 44
    return_statement      go to state 45


State 57

   44 if_part: _IF _LPAREN @5 • rel_exp $@6 _RPAREN statement

    _ID      shift, and go to state 47
    _NUMBER  shift, and go to state 48
    _LPAREN  shift, and go to state 49

    num_exp        go to state 65
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53
    rel_exp        go to state 66


State 58

   34 function_call: _ID $@4 • _LPAREN arguments _RPAREN

    _LPAREN  shift, and go to state 67


State 59

   27 num_exp: num_exp • _AROP exp
   31 exp: _LPAREN num_exp • _RPAREN

    _RPAREN  shift, and go to state 68
    _AROP    shift, and go to state 61


State 60

   46 return_statement: _RETURN num_exp _SEMICOLON •

    $default  reduce using rule 46 (return_statement)


State 61

   27 num_exp: num_exp _AROP • exp

    _ID      shift, and go to state 47
    _NUMBER  shift, and go to state 48
    _LPAREN  shift, and go to state 49

    exp            go to state 69
    literal        go to state 52
    function_call  go to state 53


State 62

   25 assignment_statement: _ID _ASSIGN num_exp • _SEMICOLON
   27 num_exp: num_exp • _AROP exp

    _SEMICOLON  shift, and go to state 70
    _AROP       shift, and go to state 61


State 63

   24 compound_statement: _LBRACKET statement_list _RBRACKET •

    $default  reduce using rule 24 (compound_statement)


State 64

   41 if_statement: if_part _ELSE statement •

    $default  reduce using rule 41 (if_statement)


State 65

   27 num_exp: num_exp • _AROP exp
   45 rel_exp: num_exp • _RELOP num_exp

    _AROP   shift, and go to state 61
    _RELOP  shift, and go to state 71


State 66

   44 if_part: _IF _LPAREN @5 rel_exp • $@6 _RPAREN statement

    $default  reduce using rule 43 ($@6)

    $@6  go to state 72


State 67

   34 function_call: _ID $@4 _LPAREN • arguments _RPAREN

    _ID      shift, and go to state 47
    _NUMBER  shift, and go to state 48
    _LPAREN  shift, and go to state 49

    $default  reduce using rule 35 (arguments)

    num_exp        go to state 73
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53
    arguments      go to state 74
    argument_list  go to state 75
    argument       go to state 76


State 68

   31 exp: _LPAREN num_exp _RPAREN •

    $default  reduce using rule 31 (exp)


State 69

   27 num_exp: num_exp _AROP exp •

    $default  reduce using rule 27 (num_exp)


State 70

   25 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON •

    $default  reduce using rule 25 (assignment_statement)


State 71

   45 rel_exp: num_exp _RELOP • num_exp

    _ID      shift, and go to state 47
    _NUMBER  shift, and go to state 48
    _LPAREN  shift, and go to state 49

    num_exp        go to state 77
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53


State 72

   44 if_part: _IF _LPAREN @5 rel_exp $@6 • _RPAREN statement

    _RPAREN  shift, and go to state 78


State 73

   27 num_exp: num_exp • _AROP exp
   39 argument: num_exp •

    _AROP  shift, and go to state 61

    $default  reduce using rule 39 (argument)


State 74

   34 function_call: _ID $@4 _LPAREN arguments • _RPAREN

    _RPAREN  shift, and go to state 79


State 75

   36 arguments: argument_list •
   38 argument_list: argument_list • _COMMA argument

    _COMMA  shift, and go to state 80

    $default  reduce using rule 36 (arguments)


State 76

   37 argument_list: argument •

    $default  reduce using rule 37 (argument_list)


State 77

   27 num_exp: num_exp • _AROP exp
   45 rel_exp: num_exp _RELOP num_exp •

    _AROP  shift, and go to state 61

    $default  reduce using rule 45 (rel_exp)


State 78

   44 if_part: _IF _LPAREN @5 rel_exp $@6 _RPAREN • statement

    _IF        shift, and go to state 35
    _RETURN    shift, and go to state 36
    _ID        shift, and go to state 37
    _LBRACKET  shift, and go to state 38

    statement             go to state 81
    compound_statement    go to state 41
    assignment_statement  go to state 42
    if_statement          go to state 43
    if_part               go to state 44
    return_statement      go to state 45


State 79

   34 function_call: _ID $@4 _LPAREN arguments _RPAREN •

    $default  reduce using rule 34 (function_call)


State 80

   38 argument_list: argument_list _COMMA • argument

    _ID      shift, and go to state 47
    _NUMBER  shift, and go to state 48
    _LPAREN  shift, and go to state 49

    num_exp        go to state 73
    exp            go to state 51
    literal        go to state 52
    function_call  go to state 53
    argument       go to state 82


State 81

   44 if_part: _IF _LPAREN @5 rel_exp $@6 _RPAREN statement •

    $default  reduce using rule 44 (if_part)


State 82

   38 argument_list: argument_list _COMMA argument •

    $default  reduce using rule 38 (argument_list)
