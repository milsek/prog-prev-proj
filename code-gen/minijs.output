Terminals unused in grammar

    _QMARK
    _COLON


Grammar

    0 $accept: program $end

    1 program: global_list function_list

    2 global_list: ε
    3            | global_list global_var

    4 global_var: _VARDEC _ID _SEMICOLON

    5 function_list: function
    6              | function_list function

    7 $@1: ε

    8 function: _FUNCDEC _ID $@1 _LPAREN parameters _RPAREN body

    9 $@2: ε

   10 function: _VARDEC _ID _ASSIGN $@2 arrow_parameters _ARROW body

   11 $@3: ε

   12 function: _VARDEC _ID _ASSIGN $@3 _FUNCDEC _LPAREN parameters _RPAREN body

   13 parameters: ε
   14           | parameter_list

   15 arrow_parameters: _LPAREN _RPAREN
   16                 | parameter
   17                 | _LPAREN parameter_list _RPAREN

   18 parameter_list: parameter
   19               | parameter_list _COMMA parameter

   20 parameter: _ID

   21 $@4: ε

   22 body: _LBRACKET variable_list $@4 statement_list _RBRACKET

   23 variable_list: ε
   24              | variable_list variable

   25 variable: _VARDEC _ID _SEMICOLON

   26 statement_list: ε
   27               | statement_list statement

   28 statement: compound_statement
   29          | assignment_statement
   30          | if_statement
   31          | return_statement

   32 compound_statement: _LBRACKET statement_list _RBRACKET

   33 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   34 num_exp: exp
   35        | num_exp _AROP exp

   36 exp: literal
   37    | _ID
   38    | function_call
   39    | _LPAREN num_exp _RPAREN

   40 literal: _NUMBER

   41 $@5: ε

   42 function_call: _ID $@5 _LPAREN arguments _RPAREN

   43 arguments: ε
   44          | argument_list

   45 argument_list: argument
   46              | argument_list _COMMA argument

   47 argument: num_exp

   48 if_statement: if_part
   49             | if_part _ELSE statement

   50 @6: ε

   51 $@7: ε

   52 if_part: _IF _LPAREN @6 rel_exp $@7 _RPAREN statement

   53 rel_exp: num_exp _RELOP num_exp

   54 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _VARDEC <i> (258) 4 10 12 25
    _FUNCDEC (259) 8 12
    _ARROW (260) 10
    _COMMA (261) 19 46
    _QMARK (262)
    _COLON (263)
    _IF (264) 52
    _ELSE (265) 49
    _RETURN (266) 54
    _ID <s> (267) 4 8 10 12 20 25 33 37 42
    _NUMBER <s> (268) 40
    _LPAREN (269) 8 12 15 17 39 42 52
    _RPAREN (270) 8 12 15 17 39 42 52
    _LBRACKET (271) 22 32
    _RBRACKET (272) 22 32
    _ASSIGN (273) 10 12 33
    _SEMICOLON (274) 4 25 33 54
    _AROP <i> (275) 35
    _RELOP <i> (276) 53
    ONLY_IF (277)


Nonterminals, with rules where they appear

    $accept (23)
        on left: 0
    program (24)
        on left: 1
        on right: 0
    global_list (25)
        on left: 2 3
        on right: 1 3
    global_var (26)
        on left: 4
        on right: 3
    function_list (27)
        on left: 5 6
        on right: 1 6
    function (28)
        on left: 8 10 12
        on right: 5 6
    $@1 (29)
        on left: 7
        on right: 8
    $@2 (30)
        on left: 9
        on right: 10
    $@3 (31)
        on left: 11
        on right: 12
    parameters (32)
        on left: 13 14
        on right: 8 12
    arrow_parameters (33)
        on left: 15 16 17
        on right: 10
    parameter_list (34)
        on left: 18 19
        on right: 14 17 19
    parameter (35)
        on left: 20
        on right: 16 18 19
    body (36)
        on left: 22
        on right: 8 10 12
    $@4 (37)
        on left: 21
        on right: 22
    variable_list (38)
        on left: 23 24
        on right: 22 24
    variable (39)
        on left: 25
        on right: 24
    statement_list (40)
        on left: 26 27
        on right: 22 27 32
    statement (41)
        on left: 28 29 30 31
        on right: 27 49 52
    compound_statement (42)
        on left: 32
        on right: 28
    assignment_statement (43)
        on left: 33
        on right: 29
    num_exp <i> (44)
        on left: 34 35
        on right: 33 35 39 47 53 54
    exp <i> (45)
        on left: 36 37 38 39
        on right: 34 35
    literal <i> (46)
        on left: 40
        on right: 36
    function_call <i> (47)
        on left: 42
        on right: 38
    $@5 (48)
        on left: 41
        on right: 42
    arguments <i> (49)
        on left: 43 44
        on right: 42
    argument_list <i> (50)
        on left: 45 46
        on right: 44 46
    argument <i> (51)
        on left: 47
        on right: 45 46
    if_statement (52)
        on left: 48 49
        on right: 30
    if_part <i> (53)
        on left: 52
        on right: 48 49
    @6 (54)
        on left: 50
        on right: 52
    $@7 (55)
        on left: 51
        on right: 52
    rel_exp <i> (56)
        on left: 53
        on right: 52
    return_statement (57)
        on left: 54
        on right: 31


State 0

    0 $accept: • program $end

    $default  reduce using rule 2 (global_list)

    program      go to state 1
    global_list  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: global_list • function_list
    3 global_list: global_list • global_var

    _VARDEC   shift, and go to state 4
    _FUNCDEC  shift, and go to state 5

    global_var     go to state 6
    function_list  go to state 7
    function       go to state 8


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 global_var: _VARDEC • _ID _SEMICOLON
   10 function: _VARDEC • _ID _ASSIGN $@2 arrow_parameters _ARROW body
   12         | _VARDEC • _ID _ASSIGN $@3 _FUNCDEC _LPAREN parameters _RPAREN body

    _ID  shift, and go to state 9


State 5

    8 function: _FUNCDEC • _ID $@1 _LPAREN parameters _RPAREN body

    _ID  shift, and go to state 10


State 6

    3 global_list: global_list global_var •

    $default  reduce using rule 3 (global_list)


State 7

    1 program: global_list function_list •
    6 function_list: function_list • function

    _VARDEC   shift, and go to state 11
    _FUNCDEC  shift, and go to state 5

    $default  reduce using rule 1 (program)

    function  go to state 12


State 8

    5 function_list: function •

    $default  reduce using rule 5 (function_list)


State 9

    4 global_var: _VARDEC _ID • _SEMICOLON
   10 function: _VARDEC _ID • _ASSIGN $@2 arrow_parameters _ARROW body
   12         | _VARDEC _ID • _ASSIGN $@3 _FUNCDEC _LPAREN parameters _RPAREN body

    _ASSIGN     shift, and go to state 13
    _SEMICOLON  shift, and go to state 14


State 10

    8 function: _FUNCDEC _ID • $@1 _LPAREN parameters _RPAREN body

    $default  reduce using rule 7 ($@1)

    $@1  go to state 15


State 11

   10 function: _VARDEC • _ID _ASSIGN $@2 arrow_parameters _ARROW body
   12         | _VARDEC • _ID _ASSIGN $@3 _FUNCDEC _LPAREN parameters _RPAREN body

    _ID  shift, and go to state 16


State 12

    6 function_list: function_list function •

    $default  reduce using rule 6 (function_list)


State 13

   10 function: _VARDEC _ID _ASSIGN • $@2 arrow_parameters _ARROW body
   12         | _VARDEC _ID _ASSIGN • $@3 _FUNCDEC _LPAREN parameters _RPAREN body

    _FUNCDEC  reduce using rule 11 ($@3)
    $default  reduce using rule 9 ($@2)

    $@2  go to state 17
    $@3  go to state 18


State 14

    4 global_var: _VARDEC _ID _SEMICOLON •

    $default  reduce using rule 4 (global_var)


State 15

    8 function: _FUNCDEC _ID $@1 • _LPAREN parameters _RPAREN body

    _LPAREN  shift, and go to state 19


State 16

   10 function: _VARDEC _ID • _ASSIGN $@2 arrow_parameters _ARROW body
   12         | _VARDEC _ID • _ASSIGN $@3 _FUNCDEC _LPAREN parameters _RPAREN body

    _ASSIGN  shift, and go to state 13


State 17

   10 function: _VARDEC _ID _ASSIGN $@2 • arrow_parameters _ARROW body

    _ID      shift, and go to state 20
    _LPAREN  shift, and go to state 21

    arrow_parameters  go to state 22
    parameter         go to state 23


State 18

   12 function: _VARDEC _ID _ASSIGN $@3 • _FUNCDEC _LPAREN parameters _RPAREN body

    _FUNCDEC  shift, and go to state 24


State 19

    8 function: _FUNCDEC _ID $@1 _LPAREN • parameters _RPAREN body

    _ID  shift, and go to state 20

    $default  reduce using rule 13 (parameters)

    parameters      go to state 25
    parameter_list  go to state 26
    parameter       go to state 27


State 20

   20 parameter: _ID •

    $default  reduce using rule 20 (parameter)


State 21

   15 arrow_parameters: _LPAREN • _RPAREN
   17                 | _LPAREN • parameter_list _RPAREN

    _ID      shift, and go to state 20
    _RPAREN  shift, and go to state 28

    parameter_list  go to state 29
    parameter       go to state 27


State 22

   10 function: _VARDEC _ID _ASSIGN $@2 arrow_parameters • _ARROW body

    _ARROW  shift, and go to state 30


State 23

   16 arrow_parameters: parameter •

    $default  reduce using rule 16 (arrow_parameters)


State 24

   12 function: _VARDEC _ID _ASSIGN $@3 _FUNCDEC • _LPAREN parameters _RPAREN body

    _LPAREN  shift, and go to state 31


State 25

    8 function: _FUNCDEC _ID $@1 _LPAREN parameters • _RPAREN body

    _RPAREN  shift, and go to state 32


State 26

   14 parameters: parameter_list •
   19 parameter_list: parameter_list • _COMMA parameter

    _COMMA  shift, and go to state 33

    $default  reduce using rule 14 (parameters)


State 27

   18 parameter_list: parameter •

    $default  reduce using rule 18 (parameter_list)


State 28

   15 arrow_parameters: _LPAREN _RPAREN •

    $default  reduce using rule 15 (arrow_parameters)


State 29

   17 arrow_parameters: _LPAREN parameter_list • _RPAREN
   19 parameter_list: parameter_list • _COMMA parameter

    _COMMA   shift, and go to state 33
    _RPAREN  shift, and go to state 34


State 30

   10 function: _VARDEC _ID _ASSIGN $@2 arrow_parameters _ARROW • body

    _LBRACKET  shift, and go to state 35

    body  go to state 36


State 31

   12 function: _VARDEC _ID _ASSIGN $@3 _FUNCDEC _LPAREN • parameters _RPAREN body

    _ID  shift, and go to state 20

    $default  reduce using rule 13 (parameters)

    parameters      go to state 37
    parameter_list  go to state 26
    parameter       go to state 27


State 32

    8 function: _FUNCDEC _ID $@1 _LPAREN parameters _RPAREN • body

    _LBRACKET  shift, and go to state 35

    body  go to state 38


State 33

   19 parameter_list: parameter_list _COMMA • parameter

    _ID  shift, and go to state 20

    parameter  go to state 39


State 34

   17 arrow_parameters: _LPAREN parameter_list _RPAREN •

    $default  reduce using rule 17 (arrow_parameters)


State 35

   22 body: _LBRACKET • variable_list $@4 statement_list _RBRACKET

    $default  reduce using rule 23 (variable_list)

    variable_list  go to state 40


State 36

   10 function: _VARDEC _ID _ASSIGN $@2 arrow_parameters _ARROW body •

    $default  reduce using rule 10 (function)


State 37

   12 function: _VARDEC _ID _ASSIGN $@3 _FUNCDEC _LPAREN parameters • _RPAREN body

    _RPAREN  shift, and go to state 41


State 38

    8 function: _FUNCDEC _ID $@1 _LPAREN parameters _RPAREN body •

    $default  reduce using rule 8 (function)


State 39

   19 parameter_list: parameter_list _COMMA parameter •

    $default  reduce using rule 19 (parameter_list)


State 40

   22 body: _LBRACKET variable_list • $@4 statement_list _RBRACKET
   24 variable_list: variable_list • variable

    _VARDEC  shift, and go to state 42

    $default  reduce using rule 21 ($@4)

    $@4       go to state 43
    variable  go to state 44


State 41

   12 function: _VARDEC _ID _ASSIGN $@3 _FUNCDEC _LPAREN parameters _RPAREN • body

    _LBRACKET  shift, and go to state 35

    body  go to state 45


State 42

   25 variable: _VARDEC • _ID _SEMICOLON

    _ID  shift, and go to state 46


State 43

   22 body: _LBRACKET variable_list $@4 • statement_list _RBRACKET

    $default  reduce using rule 26 (statement_list)

    statement_list  go to state 47


State 44

   24 variable_list: variable_list variable •

    $default  reduce using rule 24 (variable_list)


State 45

   12 function: _VARDEC _ID _ASSIGN $@3 _FUNCDEC _LPAREN parameters _RPAREN body •

    $default  reduce using rule 12 (function)


State 46

   25 variable: _VARDEC _ID • _SEMICOLON

    _SEMICOLON  shift, and go to state 48


State 47

   22 body: _LBRACKET variable_list $@4 statement_list • _RBRACKET
   27 statement_list: statement_list • statement

    _IF        shift, and go to state 49
    _RETURN    shift, and go to state 50
    _ID        shift, and go to state 51
    _LBRACKET  shift, and go to state 52
    _RBRACKET  shift, and go to state 53

    statement             go to state 54
    compound_statement    go to state 55
    assignment_statement  go to state 56
    if_statement          go to state 57
    if_part               go to state 58
    return_statement      go to state 59


State 48

   25 variable: _VARDEC _ID _SEMICOLON •

    $default  reduce using rule 25 (variable)


State 49

   52 if_part: _IF • _LPAREN @6 rel_exp $@7 _RPAREN statement

    _LPAREN  shift, and go to state 60


State 50

   54 return_statement: _RETURN • num_exp _SEMICOLON

    _ID      shift, and go to state 61
    _NUMBER  shift, and go to state 62
    _LPAREN  shift, and go to state 63

    num_exp        go to state 64
    exp            go to state 65
    literal        go to state 66
    function_call  go to state 67


State 51

   33 assignment_statement: _ID • _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 68


State 52

   32 compound_statement: _LBRACKET • statement_list _RBRACKET

    $default  reduce using rule 26 (statement_list)

    statement_list  go to state 69


State 53

   22 body: _LBRACKET variable_list $@4 statement_list _RBRACKET •

    $default  reduce using rule 22 (body)


State 54

   27 statement_list: statement_list statement •

    $default  reduce using rule 27 (statement_list)


State 55

   28 statement: compound_statement •

    $default  reduce using rule 28 (statement)


State 56

   29 statement: assignment_statement •

    $default  reduce using rule 29 (statement)


State 57

   30 statement: if_statement •

    $default  reduce using rule 30 (statement)


State 58

   48 if_statement: if_part •
   49             | if_part • _ELSE statement

    _ELSE  shift, and go to state 70

    $default  reduce using rule 48 (if_statement)


State 59

   31 statement: return_statement •

    $default  reduce using rule 31 (statement)


State 60

   52 if_part: _IF _LPAREN • @6 rel_exp $@7 _RPAREN statement

    $default  reduce using rule 50 (@6)

    @6  go to state 71


State 61

   37 exp: _ID •
   42 function_call: _ID • $@5 _LPAREN arguments _RPAREN

    _LPAREN   reduce using rule 41 ($@5)
    $default  reduce using rule 37 (exp)

    $@5  go to state 72


State 62

   40 literal: _NUMBER •

    $default  reduce using rule 40 (literal)


State 63

   39 exp: _LPAREN • num_exp _RPAREN

    _ID      shift, and go to state 61
    _NUMBER  shift, and go to state 62
    _LPAREN  shift, and go to state 63

    num_exp        go to state 73
    exp            go to state 65
    literal        go to state 66
    function_call  go to state 67


State 64

   35 num_exp: num_exp • _AROP exp
   54 return_statement: _RETURN num_exp • _SEMICOLON

    _SEMICOLON  shift, and go to state 74
    _AROP       shift, and go to state 75


State 65

   34 num_exp: exp •

    $default  reduce using rule 34 (num_exp)


State 66

   36 exp: literal •

    $default  reduce using rule 36 (exp)


State 67

   38 exp: function_call •

    $default  reduce using rule 38 (exp)


State 68

   33 assignment_statement: _ID _ASSIGN • num_exp _SEMICOLON

    _ID      shift, and go to state 61
    _NUMBER  shift, and go to state 62
    _LPAREN  shift, and go to state 63

    num_exp        go to state 76
    exp            go to state 65
    literal        go to state 66
    function_call  go to state 67


State 69

   27 statement_list: statement_list • statement
   32 compound_statement: _LBRACKET statement_list • _RBRACKET

    _IF        shift, and go to state 49
    _RETURN    shift, and go to state 50
    _ID        shift, and go to state 51
    _LBRACKET  shift, and go to state 52
    _RBRACKET  shift, and go to state 77

    statement             go to state 54
    compound_statement    go to state 55
    assignment_statement  go to state 56
    if_statement          go to state 57
    if_part               go to state 58
    return_statement      go to state 59


State 70

   49 if_statement: if_part _ELSE • statement

    _IF        shift, and go to state 49
    _RETURN    shift, and go to state 50
    _ID        shift, and go to state 51
    _LBRACKET  shift, and go to state 52

    statement             go to state 78
    compound_statement    go to state 55
    assignment_statement  go to state 56
    if_statement          go to state 57
    if_part               go to state 58
    return_statement      go to state 59


State 71

   52 if_part: _IF _LPAREN @6 • rel_exp $@7 _RPAREN statement

    _ID      shift, and go to state 61
    _NUMBER  shift, and go to state 62
    _LPAREN  shift, and go to state 63

    num_exp        go to state 79
    exp            go to state 65
    literal        go to state 66
    function_call  go to state 67
    rel_exp        go to state 80


State 72

   42 function_call: _ID $@5 • _LPAREN arguments _RPAREN

    _LPAREN  shift, and go to state 81


State 73

   35 num_exp: num_exp • _AROP exp
   39 exp: _LPAREN num_exp • _RPAREN

    _RPAREN  shift, and go to state 82
    _AROP    shift, and go to state 75


State 74

   54 return_statement: _RETURN num_exp _SEMICOLON •

    $default  reduce using rule 54 (return_statement)


State 75

   35 num_exp: num_exp _AROP • exp

    _ID      shift, and go to state 61
    _NUMBER  shift, and go to state 62
    _LPAREN  shift, and go to state 63

    exp            go to state 83
    literal        go to state 66
    function_call  go to state 67


State 76

   33 assignment_statement: _ID _ASSIGN num_exp • _SEMICOLON
   35 num_exp: num_exp • _AROP exp

    _SEMICOLON  shift, and go to state 84
    _AROP       shift, and go to state 75


State 77

   32 compound_statement: _LBRACKET statement_list _RBRACKET •

    $default  reduce using rule 32 (compound_statement)


State 78

   49 if_statement: if_part _ELSE statement •

    $default  reduce using rule 49 (if_statement)


State 79

   35 num_exp: num_exp • _AROP exp
   53 rel_exp: num_exp • _RELOP num_exp

    _AROP   shift, and go to state 75
    _RELOP  shift, and go to state 85


State 80

   52 if_part: _IF _LPAREN @6 rel_exp • $@7 _RPAREN statement

    $default  reduce using rule 51 ($@7)

    $@7  go to state 86


State 81

   42 function_call: _ID $@5 _LPAREN • arguments _RPAREN

    _ID      shift, and go to state 61
    _NUMBER  shift, and go to state 62
    _LPAREN  shift, and go to state 63

    $default  reduce using rule 43 (arguments)

    num_exp        go to state 87
    exp            go to state 65
    literal        go to state 66
    function_call  go to state 67
    arguments      go to state 88
    argument_list  go to state 89
    argument       go to state 90


State 82

   39 exp: _LPAREN num_exp _RPAREN •

    $default  reduce using rule 39 (exp)


State 83

   35 num_exp: num_exp _AROP exp •

    $default  reduce using rule 35 (num_exp)


State 84

   33 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON •

    $default  reduce using rule 33 (assignment_statement)


State 85

   53 rel_exp: num_exp _RELOP • num_exp

    _ID      shift, and go to state 61
    _NUMBER  shift, and go to state 62
    _LPAREN  shift, and go to state 63

    num_exp        go to state 91
    exp            go to state 65
    literal        go to state 66
    function_call  go to state 67


State 86

   52 if_part: _IF _LPAREN @6 rel_exp $@7 • _RPAREN statement

    _RPAREN  shift, and go to state 92


State 87

   35 num_exp: num_exp • _AROP exp
   47 argument: num_exp •

    _AROP  shift, and go to state 75

    $default  reduce using rule 47 (argument)


State 88

   42 function_call: _ID $@5 _LPAREN arguments • _RPAREN

    _RPAREN  shift, and go to state 93


State 89

   44 arguments: argument_list •
   46 argument_list: argument_list • _COMMA argument

    _COMMA  shift, and go to state 94

    $default  reduce using rule 44 (arguments)


State 90

   45 argument_list: argument •

    $default  reduce using rule 45 (argument_list)


State 91

   35 num_exp: num_exp • _AROP exp
   53 rel_exp: num_exp _RELOP num_exp •

    _AROP  shift, and go to state 75

    $default  reduce using rule 53 (rel_exp)


State 92

   52 if_part: _IF _LPAREN @6 rel_exp $@7 _RPAREN • statement

    _IF        shift, and go to state 49
    _RETURN    shift, and go to state 50
    _ID        shift, and go to state 51
    _LBRACKET  shift, and go to state 52

    statement             go to state 95
    compound_statement    go to state 55
    assignment_statement  go to state 56
    if_statement          go to state 57
    if_part               go to state 58
    return_statement      go to state 59


State 93

   42 function_call: _ID $@5 _LPAREN arguments _RPAREN •

    $default  reduce using rule 42 (function_call)


State 94

   46 argument_list: argument_list _COMMA • argument

    _ID      shift, and go to state 61
    _NUMBER  shift, and go to state 62
    _LPAREN  shift, and go to state 63

    num_exp        go to state 87
    exp            go to state 65
    literal        go to state 66
    function_call  go to state 67
    argument       go to state 96


State 95

   52 if_part: _IF _LPAREN @6 rel_exp $@7 _RPAREN statement •

    $default  reduce using rule 52 (if_part)


State 96

   46 argument_list: argument_list _COMMA argument •

    $default  reduce using rule 46 (argument_list)
